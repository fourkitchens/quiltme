<?php

/**
 * @file
 * Primary module hooks for quiltme_picsart module.
 */

use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quiltme_picsart_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() == "user_submission") {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'quiltme_picsart_custom_user_submission_submit';
      }
    }
  }
}

/**
 * Custom submit function for user submission node bundle.
 */
function quiltme_picsart_custom_user_submission_submit(&$form, FormStateInterface &$form_state) {
  $node = $form_state->getFormObject()->getEntity();

  // Don't regenerate the images if we have them already.
  for ($i = 1; $i <= 4; $i++) {
    $field_name = "field_processed_image_{$i}";
    if (isset($node->{$field_name}->target_id)) {
      return;
    }
  }

  $picsart = \Drupal::service('quiltme_picsart.connector');
  $image_media = Media::load($node->field_original_image->target_id);
  // Apply image style.
  $style = ImageStyle::load('quiltme_user_image');
  $image_file = File::load($image_media->field_media_image->target_id);
  $image_file_url = $style->buildUrl($image_file->uri->value);

  $options = [
    'level' => 'l3',
    'email' => $form_state->getValue('field_user_email')[0]['value'],
    'node' => $node,
  ];

  if (defined('PANTHEON_ENVIRONMENT')) {
    $picsart_upload = $picsart->uploadImage(['image_url' => $image_file_url]);
  }

  // If the image upload url works, let's use that with image_id.
  // Otherwise we'll go with image_url.
  if (empty($picsart_upload['image_id'])) {
    $options['image_url'] = $image_file_url;
  }
  else {
    $options['image_id'] = $picsart_upload['image_id'];
  }

  $random_pattern_numbers = array_rand(range(0, 28), 4);

  $batch = [
    'title' => t('Getting processed images...'),
    'init_message'     => t('Commencing...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message'    => t('An error occurred during processing'),
    'finished' => 'quiltme_picsart_get_style_transfer_images_callback_finished',
  ];

  $i = 1;
  foreach ($random_pattern_numbers as $pattern_number) {
    $options['pattern_number'] = sprintf("%02d", $pattern_number);
    $options['field_name'] = "field_processed_image_{$i}";
    $batch['operations'][] = [
      'quiltme_picsart_get_style_transfer_images_callback', [$options],
    ];
    $i++;
  }

  batch_set($batch);
}

/**
 * Saves API generated images to a node.
 */
function quiltme_picsart_get_style_transfer_images_callback($options, &$context) {

  $picsart = \Drupal::service('quiltme_picsart.connector');
  $node = $options['node'];
  $field_name = $options['field_name'];

  // Should be an absolute URL to the images.
  $pattern_url = "http://dev-4k-quiltme.pantheonsite.io/themes/custom/quiltme/images/patterns/pattern-{$options['pattern_number']}.png";

  $options['reference_image_url'] = $pattern_url;

  $media_id = $picsart->getStyleTransferMediaId($options);

  $entity_type_manager = \Drupal::entityTypeManager();
  $vid = $entity_type_manager->getStorage('node')->getLatestRevisionId($node->id());
  $node = $entity_type_manager->getStorage('node')->loadRevision($vid);

  $node->set($field_name, $media_id);
  $node->save();

  $context['results'][] = $media_id;
  $context['message'] = t('Created @title', ['@title' => $pattern_url]);

  sleep(10);
}

/**
 * Batch finished callback.
 */
function quiltme_picsart_get_style_transfer_images_finished_callback($success, $results, $operations) {

  if ($success) {
    $message = \Drupal::translation()->formatPlural(
      count($results),
      'One image processed.', '@count images processed.'
    );
  }
  else {
    $message = t('Finished with an error.');
  }
  \Drupal::messenger()->addStatus($message);
}

/**
 * Implements hook_entity_presave().
 */
function quiltme_picsart_node_presave(NodeInterface $node) {
  switch ($node->bundle()) {
    // Get the URL of the chosen image and set it on field_chosen_image_url.
    case 'user_submission':
      if ($image_number = $node->get('field_chosen_image')->value) {
        $field_name = "field_processed_image_{$image_number}";
        if ($mid = $node->{$field_name}->target_id) {
          $image_media = Media::load($mid);
          $image_file = File::load($image_media->field_media_image->target_id);
          $image_file_url = \Drupal::request()->getSchemeAndHttpHost() . $image_file->createFileUrl();
          $node->set('field_chosen_image_url', $image_file_url);
        }
      }
      break;
  }
}
